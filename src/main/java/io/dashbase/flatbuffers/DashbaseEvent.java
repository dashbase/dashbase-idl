// automatically generated by the FlatBuffers compiler, do not modify

package io.dashbase.flatbuffers;

import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class DashbaseEvent extends Table {
    public static DashbaseEvent getRootAsDashbaseEvent(ByteBuffer _bb) {
        return getRootAsDashbaseEvent(_bb, new DashbaseEvent());
    }

    public static DashbaseEvent getRootAsDashbaseEvent(ByteBuffer _bb, DashbaseEvent obj) {
        _bb.order(ByteOrder.LITTLE_ENDIAN);
        return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb));
    }

    public void __init(int _i, ByteBuffer _bb) {
        bb_pos = _i;
        bb = _bb;
    }

    public DashbaseEvent __assign(int _i, ByteBuffer _bb) {
        __init(_i, _bb);
        return this;
    }

    public long timeInMillis() {
        int o = __offset(4);
        return o != 0 ? bb.getLong(o + bb_pos) : -1L;
    }

    public boolean mutateTimeInMillis(long timeInMillis) {
        int o = __offset(4);
        if (o != 0) {
            bb.putLong(o + bb_pos, timeInMillis);
            return true;
        } else {
            return false;
        }
    }

    public boolean omitPayload() {
        int o = __offset(6);
        return o != 0 ? 0 != bb.get(o + bb_pos) : false;
    }

    public boolean mutateOmitPayload(boolean omitPayload) {
        int o = __offset(6);
        if (o != 0) {
            bb.put(o + bb_pos, (byte) (omitPayload ? 1 : 0));
            return true;
        } else {
            return false;
        }
    }

    public StringCol textCols(int j) {
        return textCols(new StringCol(), j);
    }

    public StringCol textCols(StringCol obj, int j) {
        int o = __offset(8);
        return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null;
    }

    public int textColsLength() {
        int o = __offset(8);
        return o != 0 ? __vector_len(o) : 0;
    }

    public StringCol metaCols(int j) {
        return metaCols(new StringCol(), j);
    }

    public StringCol metaCols(StringCol obj, int j) {
        int o = __offset(10);
        return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null;
    }

    public int metaColsLength() {
        int o = __offset(10);
        return o != 0 ? __vector_len(o) : 0;
    }

    public StringCol idCols(int j) {
        return idCols(new StringCol(), j);
    }

    public StringCol idCols(StringCol obj, int j) {
        int o = __offset(12);
        return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null;
    }

    public int idColsLength() {
        int o = __offset(12);
        return o != 0 ? __vector_len(o) : 0;
    }

    public NumCol numberCols(int j) {
        return numberCols(new NumCol(), j);
    }

    public NumCol numberCols(NumCol obj, int j) {
        int o = __offset(14);
        return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null;
    }

    public int numberColsLength() {
        int o = __offset(14);
        return o != 0 ? __vector_len(o) : 0;
    }

    public static int createDashbaseEvent(FlatBufferBuilder builder,
                                          long timeInMillis,
                                          boolean omitPayload,
                                          int textColsOffset,
                                          int metaColsOffset,
                                          int idColsOffset,
                                          int numberColsOffset) {
        builder.startObject(6);
        DashbaseEvent.addTimeInMillis(builder, timeInMillis);
        DashbaseEvent.addNumberCols(builder, numberColsOffset);
        DashbaseEvent.addIdCols(builder, idColsOffset);
        DashbaseEvent.addMetaCols(builder, metaColsOffset);
        DashbaseEvent.addTextCols(builder, textColsOffset);
        DashbaseEvent.addOmitPayload(builder, omitPayload);
        return DashbaseEvent.endDashbaseEvent(builder);
    }

    public static void startDashbaseEvent(FlatBufferBuilder builder) {
        builder.startObject(6);
    }

    public static void addTimeInMillis(FlatBufferBuilder builder, long timeInMillis) {
        builder.addLong(0, timeInMillis, -1L);
    }

    public static void addOmitPayload(FlatBufferBuilder builder, boolean omitPayload) {
        builder.addBoolean(1, omitPayload, false);
    }

    public static void addTextCols(FlatBufferBuilder builder, int textColsOffset) {
        builder.addOffset(2, textColsOffset, 0);
    }

    public static int createTextColsVector(FlatBufferBuilder builder, int[] data) {
        builder.startVector(4, data.length, 4);
        for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]);
        return builder.endVector();
    }

    public static void startTextColsVector(FlatBufferBuilder builder, int numElems) {
        builder.startVector(4, numElems, 4);
    }

    public static void addMetaCols(FlatBufferBuilder builder, int metaColsOffset) {
        builder.addOffset(3, metaColsOffset, 0);
    }

    public static int createMetaColsVector(FlatBufferBuilder builder, int[] data) {
        builder.startVector(4, data.length, 4);
        for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]);
        return builder.endVector();
    }

    public static void startMetaColsVector(FlatBufferBuilder builder, int numElems) {
        builder.startVector(4, numElems, 4);
    }

    public static void addIdCols(FlatBufferBuilder builder, int idColsOffset) {
        builder.addOffset(4, idColsOffset, 0);
    }

    public static int createIdColsVector(FlatBufferBuilder builder, int[] data) {
        builder.startVector(4, data.length, 4);
        for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]);
        return builder.endVector();
    }

    public static void startIdColsVector(FlatBufferBuilder builder, int numElems) {
        builder.startVector(4, numElems, 4);
    }

    public static void addNumberCols(FlatBufferBuilder builder, int numberColsOffset) {
        builder.addOffset(5, numberColsOffset, 0);
    }

    public static int createNumberColsVector(FlatBufferBuilder builder, int[] data) {
        builder.startVector(4, data.length, 4);
        for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]);
        return builder.endVector();
    }

    public static void startNumberColsVector(FlatBufferBuilder builder, int numElems) {
        builder.startVector(4, numElems, 4);
    }

    public static int endDashbaseEvent(FlatBufferBuilder builder) {
        int o = builder.endObject();
        return o;
    }

    public static void finishDashbaseEventBuffer(FlatBufferBuilder builder, int offset) {
        builder.finish(offset);
    }
}

