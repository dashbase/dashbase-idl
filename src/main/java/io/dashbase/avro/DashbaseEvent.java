/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.dashbase.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class DashbaseEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1959126995677700088L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DashbaseEvent\",\"namespace\":\"io.dashbase.avro\",\"fields\":[{\"name\":\"timeInMillis\",\"type\":\"long\"},{\"name\":\"metaColumns\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"}},{\"name\":\"numberColumns\",\"type\":{\"type\":\"map\",\"values\":\"double\",\"avro.java.string\":\"String\"}},{\"name\":\"textColumns\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"}},{\"name\":\"idColumns\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"}},{\"name\":\"omitPayload\",\"type\":\"boolean\"},{\"name\":\"raw\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":\"null\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<DashbaseEvent> ENCODER =
      new BinaryMessageEncoder<DashbaseEvent>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<DashbaseEvent> DECODER =
      new BinaryMessageDecoder<DashbaseEvent>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<DashbaseEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<DashbaseEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<DashbaseEvent>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this DashbaseEvent to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a DashbaseEvent from a ByteBuffer. */
  public static DashbaseEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public long timeInMillis;
  @Deprecated public java.util.Map<java.lang.String,java.lang.String> metaColumns;
  @Deprecated public java.util.Map<java.lang.String,java.lang.Double> numberColumns;
  @Deprecated public java.util.Map<java.lang.String,java.lang.String> textColumns;
  @Deprecated public java.util.Map<java.lang.String,java.lang.String> idColumns;
  @Deprecated public boolean omitPayload;
  @Deprecated public java.lang.String raw;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DashbaseEvent() {}

  /**
   * All-args constructor.
   * @param timeInMillis The new value for timeInMillis
   * @param metaColumns The new value for metaColumns
   * @param numberColumns The new value for numberColumns
   * @param textColumns The new value for textColumns
   * @param idColumns The new value for idColumns
   * @param omitPayload The new value for omitPayload
   * @param raw The new value for raw
   */
  public DashbaseEvent(java.lang.Long timeInMillis, java.util.Map<java.lang.String,java.lang.String> metaColumns, java.util.Map<java.lang.String,java.lang.Double> numberColumns, java.util.Map<java.lang.String,java.lang.String> textColumns, java.util.Map<java.lang.String,java.lang.String> idColumns, java.lang.Boolean omitPayload, java.lang.String raw) {
    this.timeInMillis = timeInMillis;
    this.metaColumns = metaColumns;
    this.numberColumns = numberColumns;
    this.textColumns = textColumns;
    this.idColumns = idColumns;
    this.omitPayload = omitPayload;
    this.raw = raw;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return timeInMillis;
    case 1: return metaColumns;
    case 2: return numberColumns;
    case 3: return textColumns;
    case 4: return idColumns;
    case 5: return omitPayload;
    case 6: return raw;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: timeInMillis = (java.lang.Long)value$; break;
    case 1: metaColumns = (java.util.Map<java.lang.String,java.lang.String>)value$; break;
    case 2: numberColumns = (java.util.Map<java.lang.String,java.lang.Double>)value$; break;
    case 3: textColumns = (java.util.Map<java.lang.String,java.lang.String>)value$; break;
    case 4: idColumns = (java.util.Map<java.lang.String,java.lang.String>)value$; break;
    case 5: omitPayload = (java.lang.Boolean)value$; break;
    case 6: raw = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'timeInMillis' field.
   * @return The value of the 'timeInMillis' field.
   */
  public java.lang.Long getTimeInMillis() {
    return timeInMillis;
  }

  /**
   * Sets the value of the 'timeInMillis' field.
   * @param value the value to set.
   */
  public void setTimeInMillis(java.lang.Long value) {
    this.timeInMillis = value;
  }

  /**
   * Gets the value of the 'metaColumns' field.
   * @return The value of the 'metaColumns' field.
   */
  public java.util.Map<java.lang.String,java.lang.String> getMetaColumns() {
    return metaColumns;
  }

  /**
   * Sets the value of the 'metaColumns' field.
   * @param value the value to set.
   */
  public void setMetaColumns(java.util.Map<java.lang.String,java.lang.String> value) {
    this.metaColumns = value;
  }

  /**
   * Gets the value of the 'numberColumns' field.
   * @return The value of the 'numberColumns' field.
   */
  public java.util.Map<java.lang.String,java.lang.Double> getNumberColumns() {
    return numberColumns;
  }

  /**
   * Sets the value of the 'numberColumns' field.
   * @param value the value to set.
   */
  public void setNumberColumns(java.util.Map<java.lang.String,java.lang.Double> value) {
    this.numberColumns = value;
  }

  /**
   * Gets the value of the 'textColumns' field.
   * @return The value of the 'textColumns' field.
   */
  public java.util.Map<java.lang.String,java.lang.String> getTextColumns() {
    return textColumns;
  }

  /**
   * Sets the value of the 'textColumns' field.
   * @param value the value to set.
   */
  public void setTextColumns(java.util.Map<java.lang.String,java.lang.String> value) {
    this.textColumns = value;
  }

  /**
   * Gets the value of the 'idColumns' field.
   * @return The value of the 'idColumns' field.
   */
  public java.util.Map<java.lang.String,java.lang.String> getIdColumns() {
    return idColumns;
  }

  /**
   * Sets the value of the 'idColumns' field.
   * @param value the value to set.
   */
  public void setIdColumns(java.util.Map<java.lang.String,java.lang.String> value) {
    this.idColumns = value;
  }

  /**
   * Gets the value of the 'omitPayload' field.
   * @return The value of the 'omitPayload' field.
   */
  public java.lang.Boolean getOmitPayload() {
    return omitPayload;
  }

  /**
   * Sets the value of the 'omitPayload' field.
   * @param value the value to set.
   */
  public void setOmitPayload(java.lang.Boolean value) {
    this.omitPayload = value;
  }

  /**
   * Gets the value of the 'raw' field.
   * @return The value of the 'raw' field.
   */
  public java.lang.String getRaw() {
    return raw;
  }

  /**
   * Sets the value of the 'raw' field.
   * @param value the value to set.
   */
  public void setRaw(java.lang.String value) {
    this.raw = value;
  }

  /**
   * Creates a new DashbaseEvent RecordBuilder.
   * @return A new DashbaseEvent RecordBuilder
   */
  public static io.dashbase.avro.DashbaseEvent.Builder newBuilder() {
    return new io.dashbase.avro.DashbaseEvent.Builder();
  }

  /**
   * Creates a new DashbaseEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DashbaseEvent RecordBuilder
   */
  public static io.dashbase.avro.DashbaseEvent.Builder newBuilder(io.dashbase.avro.DashbaseEvent.Builder other) {
    return new io.dashbase.avro.DashbaseEvent.Builder(other);
  }

  /**
   * Creates a new DashbaseEvent RecordBuilder by copying an existing DashbaseEvent instance.
   * @param other The existing instance to copy.
   * @return A new DashbaseEvent RecordBuilder
   */
  public static io.dashbase.avro.DashbaseEvent.Builder newBuilder(io.dashbase.avro.DashbaseEvent other) {
    return new io.dashbase.avro.DashbaseEvent.Builder(other);
  }

  /**
   * RecordBuilder for DashbaseEvent instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DashbaseEvent>
    implements org.apache.avro.data.RecordBuilder<DashbaseEvent> {

    private long timeInMillis;
    private java.util.Map<java.lang.String,java.lang.String> metaColumns;
    private java.util.Map<java.lang.String,java.lang.Double> numberColumns;
    private java.util.Map<java.lang.String,java.lang.String> textColumns;
    private java.util.Map<java.lang.String,java.lang.String> idColumns;
    private boolean omitPayload;
    private java.lang.String raw;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.dashbase.avro.DashbaseEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.timeInMillis)) {
        this.timeInMillis = data().deepCopy(fields()[0].schema(), other.timeInMillis);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.metaColumns)) {
        this.metaColumns = data().deepCopy(fields()[1].schema(), other.metaColumns);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.numberColumns)) {
        this.numberColumns = data().deepCopy(fields()[2].schema(), other.numberColumns);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.textColumns)) {
        this.textColumns = data().deepCopy(fields()[3].schema(), other.textColumns);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.idColumns)) {
        this.idColumns = data().deepCopy(fields()[4].schema(), other.idColumns);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.omitPayload)) {
        this.omitPayload = data().deepCopy(fields()[5].schema(), other.omitPayload);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.raw)) {
        this.raw = data().deepCopy(fields()[6].schema(), other.raw);
        fieldSetFlags()[6] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing DashbaseEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(io.dashbase.avro.DashbaseEvent other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.timeInMillis)) {
        this.timeInMillis = data().deepCopy(fields()[0].schema(), other.timeInMillis);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.metaColumns)) {
        this.metaColumns = data().deepCopy(fields()[1].schema(), other.metaColumns);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.numberColumns)) {
        this.numberColumns = data().deepCopy(fields()[2].schema(), other.numberColumns);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.textColumns)) {
        this.textColumns = data().deepCopy(fields()[3].schema(), other.textColumns);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.idColumns)) {
        this.idColumns = data().deepCopy(fields()[4].schema(), other.idColumns);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.omitPayload)) {
        this.omitPayload = data().deepCopy(fields()[5].schema(), other.omitPayload);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.raw)) {
        this.raw = data().deepCopy(fields()[6].schema(), other.raw);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'timeInMillis' field.
      * @return The value.
      */
    public java.lang.Long getTimeInMillis() {
      return timeInMillis;
    }

    /**
      * Sets the value of the 'timeInMillis' field.
      * @param value The value of 'timeInMillis'.
      * @return This builder.
      */
    public io.dashbase.avro.DashbaseEvent.Builder setTimeInMillis(long value) {
      validate(fields()[0], value);
      this.timeInMillis = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'timeInMillis' field has been set.
      * @return True if the 'timeInMillis' field has been set, false otherwise.
      */
    public boolean hasTimeInMillis() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'timeInMillis' field.
      * @return This builder.
      */
    public io.dashbase.avro.DashbaseEvent.Builder clearTimeInMillis() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'metaColumns' field.
      * @return The value.
      */
    public java.util.Map<java.lang.String,java.lang.String> getMetaColumns() {
      return metaColumns;
    }

    /**
      * Sets the value of the 'metaColumns' field.
      * @param value The value of 'metaColumns'.
      * @return This builder.
      */
    public io.dashbase.avro.DashbaseEvent.Builder setMetaColumns(java.util.Map<java.lang.String,java.lang.String> value) {
      validate(fields()[1], value);
      this.metaColumns = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'metaColumns' field has been set.
      * @return True if the 'metaColumns' field has been set, false otherwise.
      */
    public boolean hasMetaColumns() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'metaColumns' field.
      * @return This builder.
      */
    public io.dashbase.avro.DashbaseEvent.Builder clearMetaColumns() {
      metaColumns = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'numberColumns' field.
      * @return The value.
      */
    public java.util.Map<java.lang.String,java.lang.Double> getNumberColumns() {
      return numberColumns;
    }

    /**
      * Sets the value of the 'numberColumns' field.
      * @param value The value of 'numberColumns'.
      * @return This builder.
      */
    public io.dashbase.avro.DashbaseEvent.Builder setNumberColumns(java.util.Map<java.lang.String,java.lang.Double> value) {
      validate(fields()[2], value);
      this.numberColumns = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'numberColumns' field has been set.
      * @return True if the 'numberColumns' field has been set, false otherwise.
      */
    public boolean hasNumberColumns() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'numberColumns' field.
      * @return This builder.
      */
    public io.dashbase.avro.DashbaseEvent.Builder clearNumberColumns() {
      numberColumns = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'textColumns' field.
      * @return The value.
      */
    public java.util.Map<java.lang.String,java.lang.String> getTextColumns() {
      return textColumns;
    }

    /**
      * Sets the value of the 'textColumns' field.
      * @param value The value of 'textColumns'.
      * @return This builder.
      */
    public io.dashbase.avro.DashbaseEvent.Builder setTextColumns(java.util.Map<java.lang.String,java.lang.String> value) {
      validate(fields()[3], value);
      this.textColumns = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'textColumns' field has been set.
      * @return True if the 'textColumns' field has been set, false otherwise.
      */
    public boolean hasTextColumns() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'textColumns' field.
      * @return This builder.
      */
    public io.dashbase.avro.DashbaseEvent.Builder clearTextColumns() {
      textColumns = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'idColumns' field.
      * @return The value.
      */
    public java.util.Map<java.lang.String,java.lang.String> getIdColumns() {
      return idColumns;
    }

    /**
      * Sets the value of the 'idColumns' field.
      * @param value The value of 'idColumns'.
      * @return This builder.
      */
    public io.dashbase.avro.DashbaseEvent.Builder setIdColumns(java.util.Map<java.lang.String,java.lang.String> value) {
      validate(fields()[4], value);
      this.idColumns = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'idColumns' field has been set.
      * @return True if the 'idColumns' field has been set, false otherwise.
      */
    public boolean hasIdColumns() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'idColumns' field.
      * @return This builder.
      */
    public io.dashbase.avro.DashbaseEvent.Builder clearIdColumns() {
      idColumns = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'omitPayload' field.
      * @return The value.
      */
    public java.lang.Boolean getOmitPayload() {
      return omitPayload;
    }

    /**
      * Sets the value of the 'omitPayload' field.
      * @param value The value of 'omitPayload'.
      * @return This builder.
      */
    public io.dashbase.avro.DashbaseEvent.Builder setOmitPayload(boolean value) {
      validate(fields()[5], value);
      this.omitPayload = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'omitPayload' field has been set.
      * @return True if the 'omitPayload' field has been set, false otherwise.
      */
    public boolean hasOmitPayload() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'omitPayload' field.
      * @return This builder.
      */
    public io.dashbase.avro.DashbaseEvent.Builder clearOmitPayload() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'raw' field.
      * @return The value.
      */
    public java.lang.String getRaw() {
      return raw;
    }

    /**
      * Sets the value of the 'raw' field.
      * @param value The value of 'raw'.
      * @return This builder.
      */
    public io.dashbase.avro.DashbaseEvent.Builder setRaw(java.lang.String value) {
      validate(fields()[6], value);
      this.raw = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'raw' field has been set.
      * @return True if the 'raw' field has been set, false otherwise.
      */
    public boolean hasRaw() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'raw' field.
      * @return This builder.
      */
    public io.dashbase.avro.DashbaseEvent.Builder clearRaw() {
      raw = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public DashbaseEvent build() {
      try {
        DashbaseEvent record = new DashbaseEvent();
        record.timeInMillis = fieldSetFlags()[0] ? this.timeInMillis : (java.lang.Long) defaultValue(fields()[0]);
        record.metaColumns = fieldSetFlags()[1] ? this.metaColumns : (java.util.Map<java.lang.String,java.lang.String>) defaultValue(fields()[1]);
        record.numberColumns = fieldSetFlags()[2] ? this.numberColumns : (java.util.Map<java.lang.String,java.lang.Double>) defaultValue(fields()[2]);
        record.textColumns = fieldSetFlags()[3] ? this.textColumns : (java.util.Map<java.lang.String,java.lang.String>) defaultValue(fields()[3]);
        record.idColumns = fieldSetFlags()[4] ? this.idColumns : (java.util.Map<java.lang.String,java.lang.String>) defaultValue(fields()[4]);
        record.omitPayload = fieldSetFlags()[5] ? this.omitPayload : (java.lang.Boolean) defaultValue(fields()[5]);
        record.raw = fieldSetFlags()[6] ? this.raw : (java.lang.String) defaultValue(fields()[6]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<DashbaseEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<DashbaseEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<DashbaseEvent>
    READER$ = (org.apache.avro.io.DatumReader<DashbaseEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
